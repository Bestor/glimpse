//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Event defines model for Event.
type Event struct {
	// Description A description of the event.
	Description string `json:"description"`

	// Id The unique identifier for the event
	Id       *uint32   `json:"id,omitempty"`
	Location *Location `json:"location,omitempty"`

	// Timestamp The time the event occurred.
	Timestamp      time.Time        `json:"timestamp"`
	Transcriptions *[]Transcription `json:"transcriptions,omitempty"`
}

// Location defines model for Location.
type Location struct {
	// Latitude Latitude of the location.
	Latitude *float32 `json:"latitude,omitempty"`

	// Longitude Longitude of the location.
	Longitude *float32 `json:"longitude,omitempty"`

	// Text The written address that corresponds to the coordinates.
	Text *string `json:"text,omitempty"`
}

// Transcription defines model for Transcription.
type Transcription struct {
	// Audio The path to the original recording.
	Audio string `json:"audio"`

	// Content The content of the transcription.
	Content string `json:"content"`

	// Id The unique identifier for the Transcription
	Id *uint32 `json:"id,omitempty"`

	// Timestamp The time the transcription was created.
	Timestamp time.Time `json:"timestamp"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody = Event

// PostTranscriptionsJSONRequestBody defines body for PostTranscriptions for application/json ContentType.
type PostTranscriptionsJSONRequestBody = Transcription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all events
	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request)
	// Add a new event
	// (POST /events)
	PostEvents(w http.ResponseWriter, r *http.Request)
	// List all transcriptions
	// (GET /transcriptions)
	GetTranscriptions(w http.ResponseWriter, r *http.Request)
	// Add a new transcription
	// (POST /transcriptions)
	PostTranscriptions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostEvents operation middleware
func (siw *ServerInterfaceWrapper) PostEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTranscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetTranscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTranscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTranscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostTranscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTranscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/events", wrapper.GetEvents)
	m.HandleFunc("POST "+options.BaseURL+"/events", wrapper.PostEvents)
	m.HandleFunc("GET "+options.BaseURL+"/transcriptions", wrapper.GetTranscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/transcriptions", wrapper.PostTranscriptions)

	return m
}

type GetEventsRequestObject struct {
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse []Event

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsRequestObject struct {
	Body *PostEventsJSONRequestBody
}

type PostEventsResponseObject interface {
	VisitPostEventsResponse(w http.ResponseWriter) error
}

type PostEvents201JSONResponse Event

func (response PostEvents201JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents400Response struct {
}

func (response PostEvents400Response) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTranscriptionsRequestObject struct {
}

type GetTranscriptionsResponseObject interface {
	VisitGetTranscriptionsResponse(w http.ResponseWriter) error
}

type GetTranscriptions200JSONResponse []Transcription

func (response GetTranscriptions200JSONResponse) VisitGetTranscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTranscriptionsRequestObject struct {
	Body *PostTranscriptionsJSONRequestBody
}

type PostTranscriptionsResponseObject interface {
	VisitPostTranscriptionsResponse(w http.ResponseWriter) error
}

type PostTranscriptions201JSONResponse Transcription

func (response PostTranscriptions201JSONResponse) VisitPostTranscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTranscriptions400Response struct {
}

func (response PostTranscriptions400Response) VisitPostTranscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all events
	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// Add a new event
	// (POST /events)
	PostEvents(ctx context.Context, request PostEventsRequestObject) (PostEventsResponseObject, error)
	// List all transcriptions
	// (GET /transcriptions)
	GetTranscriptions(ctx context.Context, request GetTranscriptionsRequestObject) (GetTranscriptionsResponseObject, error)
	// Add a new transcription
	// (POST /transcriptions)
	PostTranscriptions(ctx context.Context, request PostTranscriptionsRequestObject) (PostTranscriptionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request) {
	var request GetEventsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEvents operation middleware
func (sh *strictHandler) PostEvents(w http.ResponseWriter, r *http.Request) {
	var request PostEventsRequestObject

	var body PostEventsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEvents(ctx, request.(PostEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsResponseObject); ok {
		if err := validResponse.VisitPostEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTranscriptions operation middleware
func (sh *strictHandler) GetTranscriptions(w http.ResponseWriter, r *http.Request) {
	var request GetTranscriptionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTranscriptions(ctx, request.(GetTranscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTranscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTranscriptionsResponseObject); ok {
		if err := validResponse.VisitGetTranscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTranscriptions operation middleware
func (sh *strictHandler) PostTranscriptions(w http.ResponseWriter, r *http.Request) {
	var request PostTranscriptionsRequestObject

	var body PostTranscriptionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTranscriptions(ctx, request.(PostTranscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTranscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTranscriptionsResponseObject); ok {
		if err := validResponse.VisitPostTranscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
